"""Initial CDM migration with all tables

Revision ID: a01c4680c601
Revises: 
Create Date: 2025-10-07 00:16:32.273041

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a01c4680c601'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entities',
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('company_name', sa.String(), nullable=False),
    sa.Column('financial_year_start', sa.Date(), nullable=False),
    sa.Column('financial_year_end', sa.Date(), nullable=False),
    sa.Column('books_begin_from', sa.Date(), nullable=True),
    sa.Column('gst_registration_type', sa.Enum('REGULAR', 'COMPOSITION', name='gsttype'), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('gstin', sa.String(), nullable=True),
    sa.Column('currency', sa.String(), nullable=True),
    sa.Column('pan', sa.String(), nullable=True),
    sa.Column('cin', sa.String(), nullable=True),
    sa.Column('registration_type', sa.String(), nullable=True),
    sa.Column('tan', sa.String(), nullable=True),
    sa.Column('ifsc_default_bank', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('company_id'),
    sa.UniqueConstraint('gstin')
    )
    op.create_index(op.f('ix_entities_company_id'), 'entities', ['company_id'], unique=False)
    op.create_table('audit_events',
    sa.Column('event_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('table_name', sa.String(), nullable=False),
    sa.Column('record_id', sa.String(), nullable=False),
    sa.Column('operation', sa.String(), nullable=False),
    sa.Column('old_values', sa.JSON(), nullable=True),
    sa.Column('new_values', sa.JSON(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('idx_audit_company_table', 'audit_events', ['company_id', 'table_name'], unique=False)
    op.create_index('idx_audit_record', 'audit_events', ['record_id'], unique=False)
    op.create_index('idx_audit_timestamp', 'audit_events', ['timestamp'], unique=False)
    op.create_table('groups',
    sa.Column('group_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('group_name', sa.String(), nullable=False),
    sa.Column('parent_group_id', sa.String(), nullable=True),
    sa.Column('nature', sa.Enum('ASSET', 'LIABILITY', 'INCOME', 'EXPENSE', name='groupnature'), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('behaves_like_subledger', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['parent_group_id'], ['groups.group_id'], ),
    sa.PrimaryKeyConstraint('group_id')
    )
    op.create_index('idx_group_company_name', 'groups', ['company_id', 'group_name'], unique=False)
    op.create_table('ingestion_jobs',
    sa.Column('job_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('file_name', sa.String(), nullable=False),
    sa.Column('file_type', sa.String(), nullable=False),
    sa.Column('file_size', sa.Numeric(precision=15, scale=0), nullable=True),
    sa.Column('file_hash', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('records_processed', sa.Numeric(precision=10, scale=0), nullable=True),
    sa.Column('records_failed', sa.Numeric(precision=10, scale=0), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_duration', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.PrimaryKeyConstraint('job_id')
    )
    op.create_index('idx_job_company_status', 'ingestion_jobs', ['company_id', 'status'], unique=False)
    op.create_index('idx_job_file_hash', 'ingestion_jobs', ['file_hash'], unique=False)
    op.create_table('reconciliation_log',
    sa.Column('recon_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('source_table', sa.String(), nullable=False),
    sa.Column('target_table', sa.String(), nullable=False),
    sa.Column('source_record_id', sa.String(), nullable=False),
    sa.Column('target_record_id', sa.String(), nullable=True),
    sa.Column('match_score', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('match_rule', sa.String(), nullable=True),
    sa.Column('rule_details', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('ai_reasoning', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.PrimaryKeyConstraint('recon_id')
    )
    op.create_index('idx_recon_company_source', 'reconciliation_log', ['company_id', 'source_table'], unique=False)
    op.create_index('idx_recon_source_record', 'reconciliation_log', ['source_record_id'], unique=False)
    op.create_index('idx_recon_status_score', 'reconciliation_log', ['status', 'match_score'], unique=False)
    op.create_index('idx_recon_target_record', 'reconciliation_log', ['target_record_id'], unique=False)
    op.create_table('stock_items',
    sa.Column('item_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('item_name', sa.String(), nullable=False),
    sa.Column('stock_group', sa.String(), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('hsn_code', sa.String(), nullable=True),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('valuation_method', sa.String(), nullable=True),
    sa.Column('is_nil_rated', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_index('idx_stock_company_name', 'stock_items', ['company_id', 'item_name'], unique=False)
    op.create_index('idx_stock_hsn', 'stock_items', ['hsn_code'], unique=False)
    op.create_table('ledgers',
    sa.Column('ledger_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('ledger_name', sa.String(), nullable=False),
    sa.Column('group_id', sa.String(), nullable=True),
    sa.Column('opening_balance', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('dr_cr', sa.String(), nullable=True),
    sa.Column('gst_registration_no', sa.String(), nullable=True),
    sa.Column('gst_applicable', sa.Boolean(), nullable=True),
    sa.Column('default_credit_period', sa.Integer(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ),
    sa.PrimaryKeyConstraint('ledger_id')
    )
    op.create_index('idx_ledger_company_name', 'ledgers', ['company_id', 'ledger_name'], unique=False)
    op.create_index('idx_ledger_group', 'ledgers', ['group_id'], unique=False)
    op.create_table('tax_ledgers',
    sa.Column('tax_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('tax_name', sa.String(), nullable=False),
    sa.Column('rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('ledger_ref', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['ledger_ref'], ['ledgers.ledger_id'], ),
    sa.PrimaryKeyConstraint('tax_id')
    )
    op.create_index('idx_tax_company_type', 'tax_ledgers', ['company_id', 'type'], unique=False)
    op.create_table('vouchers',
    sa.Column('voucher_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('voucher_type', sa.String(), nullable=False),
    sa.Column('voucher_date', sa.Date(), nullable=False),
    sa.Column('voucher_number', sa.String(), nullable=False),
    sa.Column('party_ledger_id', sa.String(), nullable=True),
    sa.Column('narration', sa.String(), nullable=True),
    sa.Column('ref_document', sa.String(), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'POSTED', 'VERIFIED', name='voucherstatus'), nullable=True),
    sa.Column('is_gst_applicable', sa.Boolean(), nullable=True),
    sa.Column('place_of_supply', sa.String(), nullable=True),
    sa.Column('source_system', sa.String(), nullable=True),
    sa.Column('external_match_key', sa.String(), nullable=True),
    sa.Column('reconciliation_status', sa.Enum('UNMATCHED', 'AUTO_MATCHED', 'MANUALLY_VERIFIED', 'DISPUTED', name='reconciliationstatus'), nullable=True),
    sa.Column('reconciliation_source', sa.String(), nullable=True),
    sa.Column('reconciliation_confidence', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['party_ledger_id'], ['ledgers.ledger_id'], ),
    sa.PrimaryKeyConstraint('voucher_id')
    )
    op.create_index('idx_voucher_company_date', 'vouchers', ['company_id', 'voucher_date'], unique=False)
    op.create_index('idx_voucher_external_key', 'vouchers', ['external_match_key'], unique=False)
    op.create_index('idx_voucher_type_status', 'vouchers', ['voucher_type', 'status'], unique=False)
    op.create_table('ai_feedback',
    sa.Column('feedback_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('voucher_id', sa.String(), nullable=True),
    sa.Column('original_prediction', sa.JSON(), nullable=True),
    sa.Column('user_correction', sa.JSON(), nullable=True),
    sa.Column('feedback_type', sa.String(), nullable=True),
    sa.Column('confidence_before', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('confidence_after', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['voucher_id'], ['vouchers.voucher_id'], ),
    sa.PrimaryKeyConstraint('feedback_id')
    )
    op.create_index('idx_feedback_company_type', 'ai_feedback', ['company_id', 'feedback_type'], unique=False)
    op.create_index('idx_feedback_voucher', 'ai_feedback', ['voucher_id'], unique=False)
    op.create_table('bank_statements',
    sa.Column('bank_txn_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('bank_id', sa.String(), nullable=False),
    sa.Column('txn_date', sa.Date(), nullable=False),
    sa.Column('value_date', sa.Date(), nullable=True),
    sa.Column('narration', sa.String(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('dr_cr', sa.String(), nullable=False),
    sa.Column('cheque_ref', sa.String(), nullable=True),
    sa.Column('balance_after_txn', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('txn_hash', sa.String(), nullable=True),
    sa.Column('linked_voucher_id', sa.String(), nullable=True),
    sa.Column('reconciliation_status', sa.String(), nullable=True),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['bank_id'], ['ledgers.ledger_id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['linked_voucher_id'], ['vouchers.voucher_id'], ),
    sa.PrimaryKeyConstraint('bank_txn_id'),
    sa.UniqueConstraint('txn_hash')
    )
    op.create_index('idx_bank_company_date', 'bank_statements', ['company_id', 'txn_date'], unique=False)
    op.create_index('idx_bank_hash', 'bank_statements', ['txn_hash'], unique=False)
    op.create_index('idx_bank_reconciliation', 'bank_statements', ['reconciliation_status'], unique=False)
    op.create_table('gst_purchases',
    sa.Column('purchase_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('supplier_gstin', sa.String(), nullable=True),
    sa.Column('invoice_number', sa.String(), nullable=False),
    sa.Column('invoice_date', sa.Date(), nullable=False),
    sa.Column('taxable_value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('igst_amount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('cgst_amount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('sgst_amount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('itc_available', sa.Boolean(), nullable=True),
    sa.Column('invoice_hash', sa.String(), nullable=True),
    sa.Column('linked_voucher_id', sa.String(), nullable=True),
    sa.Column('reconciliation_status', sa.String(), nullable=True),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['linked_voucher_id'], ['vouchers.voucher_id'], ),
    sa.PrimaryKeyConstraint('purchase_id'),
    sa.UniqueConstraint('invoice_hash')
    )
    op.create_index('idx_gst_purchase_company_date', 'gst_purchases', ['company_id', 'invoice_date'], unique=False)
    op.create_index('idx_gst_purchase_hash', 'gst_purchases', ['invoice_hash'], unique=False)
    op.create_index('idx_gst_purchase_supplier', 'gst_purchases', ['supplier_gstin'], unique=False)
    op.create_table('gst_sales',
    sa.Column('gst_invoice_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('gstin_customer', sa.String(), nullable=True),
    sa.Column('invoice_number', sa.String(), nullable=False),
    sa.Column('invoice_date', sa.Date(), nullable=False),
    sa.Column('taxable_value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('tax_amount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('total_value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('invoice_hash', sa.String(), nullable=True),
    sa.Column('linked_voucher_id', sa.String(), nullable=True),
    sa.Column('reconciliation_status', sa.String(), nullable=True),
    sa.Column('raw_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['linked_voucher_id'], ['vouchers.voucher_id'], ),
    sa.PrimaryKeyConstraint('gst_invoice_id'),
    sa.UniqueConstraint('invoice_hash')
    )
    op.create_index('idx_gst_sales_company_date', 'gst_sales', ['company_id', 'invoice_date'], unique=False)
    op.create_index('idx_gst_sales_hash', 'gst_sales', ['invoice_hash'], unique=False)
    op.create_index('idx_gst_sales_invoice', 'gst_sales', ['invoice_number'], unique=False)
    op.create_table('voucher_lines',
    sa.Column('line_id', sa.String(), nullable=False),
    sa.Column('voucher_id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('ledger_id', sa.String(), nullable=False),
    sa.Column('debit', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('credit', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('item_id', sa.String(), nullable=True),
    sa.Column('quantity', sa.Numeric(precision=15, scale=4), nullable=True),
    sa.Column('rate', sa.Numeric(precision=18, scale=4), nullable=True),
    sa.Column('tax_id', sa.String(), nullable=True),
    sa.Column('tax_amount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('discount', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('round_off', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('narration', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['entities.company_id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['stock_items.item_id'], ),
    sa.ForeignKeyConstraint(['ledger_id'], ['ledgers.ledger_id'], ),
    sa.ForeignKeyConstraint(['tax_id'], ['tax_ledgers.tax_id'], ),
    sa.ForeignKeyConstraint(['voucher_id'], ['vouchers.voucher_id'], ),
    sa.PrimaryKeyConstraint('line_id')
    )
    op.create_index('idx_vline_company_date', 'voucher_lines', ['company_id'], unique=False)
    op.create_index('idx_vline_voucher_ledger', 'voucher_lines', ['voucher_id', 'ledger_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_vline_voucher_ledger', table_name='voucher_lines')
    op.drop_index('idx_vline_company_date', table_name='voucher_lines')
    op.drop_table('voucher_lines')
    op.drop_index('idx_gst_sales_invoice', table_name='gst_sales')
    op.drop_index('idx_gst_sales_hash', table_name='gst_sales')
    op.drop_index('idx_gst_sales_company_date', table_name='gst_sales')
    op.drop_table('gst_sales')
    op.drop_index('idx_gst_purchase_supplier', table_name='gst_purchases')
    op.drop_index('idx_gst_purchase_hash', table_name='gst_purchases')
    op.drop_index('idx_gst_purchase_company_date', table_name='gst_purchases')
    op.drop_table('gst_purchases')
    op.drop_index('idx_bank_reconciliation', table_name='bank_statements')
    op.drop_index('idx_bank_hash', table_name='bank_statements')
    op.drop_index('idx_bank_company_date', table_name='bank_statements')
    op.drop_table('bank_statements')
    op.drop_index('idx_feedback_voucher', table_name='ai_feedback')
    op.drop_index('idx_feedback_company_type', table_name='ai_feedback')
    op.drop_table('ai_feedback')
    op.drop_index('idx_voucher_type_status', table_name='vouchers')
    op.drop_index('idx_voucher_external_key', table_name='vouchers')
    op.drop_index('idx_voucher_company_date', table_name='vouchers')
    op.drop_table('vouchers')
    op.drop_index('idx_tax_company_type', table_name='tax_ledgers')
    op.drop_table('tax_ledgers')
    op.drop_index('idx_ledger_group', table_name='ledgers')
    op.drop_index('idx_ledger_company_name', table_name='ledgers')
    op.drop_table('ledgers')
    op.drop_index('idx_stock_hsn', table_name='stock_items')
    op.drop_index('idx_stock_company_name', table_name='stock_items')
    op.drop_table('stock_items')
    op.drop_index('idx_recon_target_record', table_name='reconciliation_log')
    op.drop_index('idx_recon_status_score', table_name='reconciliation_log')
    op.drop_index('idx_recon_source_record', table_name='reconciliation_log')
    op.drop_index('idx_recon_company_source', table_name='reconciliation_log')
    op.drop_table('reconciliation_log')
    op.drop_index('idx_job_file_hash', table_name='ingestion_jobs')
    op.drop_index('idx_job_company_status', table_name='ingestion_jobs')
    op.drop_table('ingestion_jobs')
    op.drop_index('idx_group_company_name', table_name='groups')
    op.drop_table('groups')
    op.drop_index('idx_audit_timestamp', table_name='audit_events')
    op.drop_index('idx_audit_record', table_name='audit_events')
    op.drop_index('idx_audit_company_table', table_name='audit_events')
    op.drop_table('audit_events')
    op.drop_index(op.f('ix_entities_company_id'), table_name='entities')
    op.drop_table('entities')
    # ### end Alembic commands ###
